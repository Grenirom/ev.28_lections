# PostgreSQL - Система управления базами данных(СУБД/DBMS)
# Это ряд программ и инструментов позволяющих создавать БД, управлять ей и манипулировать данными внутри(CRUD)

# Postgres - сама база данных, она объектно реляционная, то есть данные хранятся в виде таблиц, и таблицы имеют связи между собой

# SQL (Structured Query Language) - Декларативный язык структурированных запросов, он применяется для создания и получени данных при помощи запросов в БД

#---------------------------------
# Команда для входа в бд через юзера postgres:
# sudo -u postgres psql
# команда для выхода:
# exit

#Команда для входа в своего юзера
# psql

#Команда для выхода
# \q
#----------------------------------------------
# Создание суперюзера
# CREATE ROLE "username" SUPERUSER LOGIN PASSWORD '1';
#--------------------------------------------------
#Изменение
# ALTER USER 'username' WITH PASSWORD '1';
#-------------------------------------------
#создание БД
#CREATE DATABASE 'name';
#--------------------------------------
#\l - список всех бд
#---------------------------------------------
#\du - все юзеры
#-----------------------------------------------------------
#\dt - все таблицы (нужно подключиться к бд заранее)
#---------------------------------------
#\c 'name' - команда для подключения к бд
#-------------------------------------------------------------
# psql -U <username> -d <dbname> - подключаемся под выбранным username к dbname
#-----------------------------------------------------------------
#



#---------------------------------------------------
#                       ТИПЫ ДАННЫХ В POSTGRES

# Numeric types(числовые типы)

    #a. smallint(2 bytes) -> -32767 to 32767
    #b. integer(4 bytes) -> - 2.147.000 to 2.147.000
    #c. bigint(8 bytes) -> infinity
    #d. real(4 bytes) -> число с плавающей точкой
    #e. double precsion(8 bytes) -> real, но с двойной точностью
    #f. serial(4 bytes) -> integer, автоинкремент
#---------------------------------------------------------
#Character types(Символьные/строковые типы):
    
    #a. varchar(кол-во символов) -> Если мы укажем 50 символов, а заполним только 10, то остальные будут свободны. Максимальное кол-во символов: 255
    #b. char(кол-во символов) -> Если мы укажем 50 символов, а заполним только 10, то остальные будут заполнены будут заполнены пробелом. Максимальное количество символов: 255
    #c. text() -> неограниченное количество символов
#-------------------------------------------------------------------------------------------------
#Boolean Type
    #a. boolean(1 bytes) -> True/False
#--------------------------------
#date -> календарная дата (год/месяц/день)
#----------------------------------------------------------------------------------------
#location -> координатная точка (x, y) - (245, -12)
#--------------------------------------------------------------------------------
#Enumerate Types:
    #('a', 'b', 'c')
    #CREATE TYPE <any name> AS ENUM ('Happy', 'Sad', 'Mad');
    
# SELECT id, title, budget FROM films; - команда для получения данных

# UPDATE <table> SET <column> = <new value> WHERE <column> = <value>; - команда для обновления данных
#-----------------------------------------------------------------------
# DELETE FROM <table> WHERE <column> = <value>; - Команда для удаления данных
#-----------------------------------------------------------

# ORDER BY: Позволяет сортировать выводящие данные по убыванию или возрастанию. ASC(По возрастанию) и DESC(По убыванию)
#               СИНТАКСИС
# SELECT <row> FROM <tablename> ORDER BY <row> [ASC/DESC];

#WHERE - Используется для фильтрации по полям, будут выводиться только те данные, которые соответствуют условию оператора WHERE
#               СИНТАКСИС
# SELECT <row> FROM <tablename> WHERE <row> = 'чему либо';
#-----------------------------------------------------------------------
# BETWEEN: Условие между
#                   СИНТАКСИС
# SELECT * FROM products WHERE id BETWEEN 3 and 8;(8 не включительно)
#-----------------------------------------------------
# LIKE: Выводит результат ктоорый соответствует введенному шаблону для строк.
# Чувствителен к регистру
# ILIKE: То-же самое, только не зависит от регистра
#                      СИНТАКСИС
#SELECT <row> FROM <tablename> WHERE <row> LIKE/ILIKE  'чему либо';
#-----------------------------------------------------------------------------
# AND: Оператор 'и', используется для множественных условий
# IN: WHERE <row> IN (1,2,3,4);
#------------------------------------------------------------------------
# Экспорт бд(дамп):
# pg_dump -U <username> -d 'dbname' > 'file.sql'

# Импорт:
# psql -U <username> -d <dbname> -f <filename>
#--------------------------------------------------------
# LIMIT: Ставит ограничение в количество получаемых данных

# GROUP BY: Разделяет данные которые мы получаем в SELECT, при этом группируя их по определенному признаку. И теперь для каждой группы можно использовать функцию
#------------------------------------------------------------------------

# HAVING: Ставит условие при помощи которого данные отбираются в группировку

# Агрегатные функции: AVG(), COUNT(), MIN(), MAX(), SUM()

#------------------------------------------------------
# СВЯЗИ МЕЖДУ ТАБЛИЦАМИ(relations)
    # 1. Один к одному (One to one) - человек, паспорт
    #     в одну из таблиц добавляется поле fk и дается ограничение unique

    # 2. Один ко многим(One to many) - человек и банковские карты
    #     в таблицу много (банковские карты) доб. поле fk

    # 3. Много ко многим (Many to many) - Студенты и преподы
        # создается вспомогательная 3я таблица со связями

#Ограничения:
    # 1. NOT NULL - Обязательо к заполнению
    # 2. UNIQUE - Обозначает то, что будут храниться только уникальные данные
    # 3. CHECK -> CHECK age > 0 - Ограничение проверки на условие
    # 4. PRIMARY KEY(Для установки идентификатора данных в таблице)
    # 5. FOREIGN KEY - Для установки связей меджду таблицамиъ
    # 6. ON DELETE - Для установки поведения поведения при удалении данных, которые были связаны
#--------------------------------------------------------------------------
# JOIN: Выборка данныз из двух таблиц, то-есть так называемое соединение таблиц

# LEFT JOIN: Выборка будет содержать все строки из левой таблицы

# RIGHT JOIN: Выборка будет содержать все строки из правой таблицы

# SELECT p1.title, p1.price, o1.quantity, p1.price * o1.quantity as total_sum FROM products p1 JOIN orders o1 ON p1.id = o1.product_id;






# 1. Вытащить все произведения в котрых sourse = Moby и кол-во параграфов меньше 100
# SELECT source, totalparagraphs FROM work WHERE source = 'Moby' AND totalparagraphs < 100; 


# 2. Найти кол-во глав в каждом произведении
# select count(*), work.title from chapter join work on work.workid = chapter.workid group by work.title order by count(*) desc;

# 3. Найти сколько произведений относятся к каждому 
# select count(*), genretype from work group by genretype;

# 4. Найти кол-во параграфов в каждом произведении и вытащить названия произведений
# select count(*), work.title from paragraph join work on work.workid = paragraph.workid group by work.title;


# 5. Вытащить имена героев, чьи реплики состовляют больше 200 слов, также произведения в которых они встречаються, жанр, год выхода произдведения в порядке убывания
# select character.charname, work.title, work.genretype, work.year from character_work join character on character.charid = character_work.charid join work on work.workid = character_work.workid where character.speechcount > 200 order by work.year desc;


# 6. Вытащить героя, который чаще всех появляется в произведениях
# SELECT character.charname, COUNT(*) AS works_count FROM character_work JOIN character
# ON character.charid = character_work.charid JOIN work ON character_work.workid = work.workid
# GROUP BY character.charname ORDER BY works_count DESC LIMIT 1;